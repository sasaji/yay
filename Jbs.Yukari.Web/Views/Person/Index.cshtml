@model Jbs.Yukari.Web.Models.PersonViewModel
@{
    Layout = "_EditLayout";
}
@section basic {
  <div class="mb-2">
    <label class="form-label" asp-for="Id"></label>
    <input class="form-control" asp-for="Id" required />
  </div>

  <fieldset class="mb-2">
    <legend>名前</legend>
    <div class="row">
      <div class="col">
      </div>
      <div class="col">姓</div>
      <div class="col">名</div>
      <div class="col">ミドルネーム</div>
    </div>
    <div class="row">
      <div class="col">漢字</div>
      <div class="col">
        <input class="form-control" asp-for="Surname" />
      </div>
      <div class="col">
        <input class="form-control" asp-for="GivenName" />
      </div>
      <div class="col">
        <input class="form-control" asp-for="MiddleName" />
      </div>
    </div>
    <div class="row align-items-center">
      <div class="col">カナ</div>
      <div class="col">
        <input class="form-control" asp-for="KanaSurname" />
      </div>
      <div class="col">
        <input class="form-control" asp-for="KanaGivenName" />
      </div>
      <div class="col">
        <input class="form-control" asp-for="KanaMiddleName" />
      </div>
    </div>
    <div class="row align-items-center">
      <div class="col d-inline-block align-middle">
        <label>英字</label>
        <button id="romanize" class="btn btn-secondary btn-sm btm-sm-ex ms-2" type="button">変換</button>
      </div>
      <div class="col">
        <input class="form-control" asp-for="RomanSurname" />
      </div>
      <div class="col">
        <input class="form-control" asp-for="RomanGivenName" />
      </div>
      <div class="col">
        <input class="form-control" asp-for="RomanMiddleName" />
      </div>
    </div>
  </fieldset>

  <div class="mb-2">
    <label class="form-label" asp-for="Roles"></label>
    <button type="button" class="btn btn-secondary btn-sm btm-sm-ex ms-2" data-bs-toggle="modal" data-bs-target="#addRoleDialog">追加</button>
    <button id="removeRole" type="button" class="btn btn-secondary btn-sm btm-sm-ex">削除</button>
    <button id="upRole" type="button" class="btn btn-secondary btn-sm btm-sm-ex">↑</button>
    <button id="downRole" type="button" class="btn btn-secondary btn-sm btm-sm-ex">↓</button>
    <select id="roles" class="form-select mt-2" size="4"></select>
  </div>

  <div class="mb-2">
    <label class="form-label" asp-for="Enrollment"></label>
    <select class="form-select" asp-for="Enrollment" asp-items="Model.Enrollments.Select(e => new SelectListItem(e.Name, e.Yid.ToString()))"></select>
  </div>

  <div class="mb-2">
    <label class="form-label" asp-for="TelephoneNumber"></label>
    <input class="form-control" asp-for="TelephoneNumber" />
  </div>

  <!-- 所属/役職モーダル -->
  <div class="modal fade" id="addRoleDialog" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="addRoleLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addRoleLabel">Modal title</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <label class="form-label">所属</label>
          <select id="organizations" class="form-select mb-3"></select>
          <label class="form-label">役職</label>
          <select id="titles" class="form-select mb-3"></select>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">キャンセル</button>
          <button id="addRole" type="button" class="btn btn-primary">OK</button>
        </div>
      </div>
    </div>
  </div>
}
@section objects {
    <div class="container">
        <button class="btn btn-secondary" asp-action="Policy">ポリシー適用</button>
        <div class="row">
            <div class="col col-sm-12">
                <ul id="object-tabs" class="nav">
                    <li class="nav-item">
                        <a href="#user" class="nav-link" data-bs-toggle="tab">ユーザー</a>
                    </li>
                    <li class="nav-item">
                        <a href="#group" class="nav-link" data-bs-toggle="tab">グループ</a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div id="user" class="tab-pane active">
                        @await Html.PartialAsync("_Users", Model.Users)
                    </div>
                    <div id="group" class="tab-pane">
                        @await Html.PartialAsync("_Groups", Model.Groups)
                    </div>
                </div>
            </div>
        </div>
    </div>
    @Html.HiddenFor(model => model.RolesJson)
    @Html.HiddenFor(model => model.OrganizationsJson)
    @Html.HiddenFor(model => model.TitlesJson)
    @for (int i = 0; i < Model.Enrollments.Count(); i++ )
    {
        @Html.Hidden("Enrollments[" + i + "].Yid", Model.Enrollments[i].Yid)
        @Html.Hidden("Enrollments[" + i + "].Name", Model.Enrollments[i].Name)
    }
}
@section Scripts {
    <script>
        $(function () {
            var rolesJson = JSON.parse($('#@nameof(Model.RolesJson)').val());
            console.log(rolesJson);
            if (rolesJson) {
              rolesJson.forEach(function (v) {
                  console.log(v);
                  var option = $('<option>').val(JSON.stringify(v)).text(`${v.organization.name}${v.title ? `/ ${v.title.name}` : ``}`);
                  $('#roles').append(option);
              });
            }
            roleButtonSetup();
            roleTextSetup();
            var organizationsJson = JSON.parse($('#@nameof(Model.OrganizationsJson)').val());
            console.log(organizationsJson);
            organizationsJson.forEach(function (v) {
                var option = $('<option>').val(v.key).text(v.value);
                $('#organizations').append(option);
            });
            var titlesJson = JSON.parse($('#@nameof(Model.TitlesJson)').val());
            titlesJson.forEach(function (v) {
                var option = $('<option>').val(v.key).text(v.value);
                $('#titles').append(option);
            });

            $('#romanize').on('click', function () {
                //console.log($('#Surname').val());
                $.ajax('/person/romanize', {
                    type: 'POST',
                    dataType: 'json',
                    data: {
                        "names": [
                            $('#@nameof(Model.Surname)').val(),
                            $('#@nameof(Model.KanaSurname)').val(),
                            $('#@nameof(Model.GivenName)').val(),
                            $('#@nameof(Model.KanaGivenName)').val(),
                            $('#@nameof(Model.MiddleName)').val(),
                            $('#@nameof(Model.KanaMiddleName)').val()
                        ]
                    }
                }).done(function (result) {
                    console.log(result);
                    $('#@nameof(Model.RomanSurname)').val(result.romanSurname);
                    $('#@nameof(Model.RomanGivenName)').val(result.romanGivenName);
                    $('#@nameof(Model.RomanMiddleName)').val(result.romanMiddleName);
                });
            });

            $('#roles').on('change', function () {
                roleButtonSetup();
            });

            $('#addRole').on('click', function () {
                //console.log('addRole');
                var value = {
                    "organization": {
                        "yid": $('#organizations option:selected').val(),
                        "name": $('#organizations option:selected').text()
                    }, "title": {
                        "yid": $('#titles option:selected').val(),
                        "name": $('#titles option:selected').text()
                    }
                };
                var roles = JSON.parse($('#@nameof(Model.RolesJson)').val());
                if (roles.some(r => r.organization.yid == value.organization.yid && r.title.yid == value.title.yid)) {
                    alert('すでに追加されています。');
                } else {
                    $('#addRoleDialog').modal('hide');
                    $('body').removeClass('modal-open');
                    $('.modal-backdrop').remove();
                    var option = $('<option>')
                        .val(JSON.stringify(value))
                        .text($('#organizations option:selected').text() + ' / ' + $('#titles option:selected').text());
                    $('#roles').append(option);
                    roleTextSetup();
                    roleListSetup();
                }
            });

            $('#removeRole').on('click', function () {
                $('#roles option:selected').remove();
                roleButtonSetup();
                roleTextSetup();
                roleListSetup();
            });

            $('#upRole').on('click', function () {
                $op = $('#roles option:selected');
                $op.first().prev().before($op);
                roleButtonSetup();
                roleTextSetup();
                roleListSetup();
            });

            $('#downRole').on('click', function () {
                $op = $('#roles option:selected');
                $op.last().next().after($op);
                roleButtonSetup();
                roleTextSetup();
                roleListSetup();
            });
        });

        function roleButtonSetup() {
            var index = $("#roles").prop("selectedIndex");
            if (index >= 0) {
                $('#removeRole').attr('disabled', false);
                if (index == 0)
                    $('#upRole').attr('disabled', true);
                else
                    $('#upRole').attr('disabled', false);
                if (index == $('#roles').children().length - 1)
                    $('#downRole').attr('disabled', true);
                else
                    $('#downRole').attr('disabled', false);
            } else {
                $('#removeRole').attr('disabled', true);
                $('#upRole').attr('disabled', true);
                $('#downRole').attr('disabled', true);
            }
        }

        function roleTextSetup() {
            $("#roles option").each(function (i) {
                //console.log(this.text);
                if (i == 0 && this.text.startsWith('(兼) '))
                    this.text = this.text.slice(4);
                if (i > 0 && !this.text.startsWith('(兼) '))
                    this.text = '(兼) ' + this.text;
            });
        }

        function roleListSetup() {
            var result = '[';
            var comma = '';
            $("#roles option").each(function (i, v) {
                result += comma + v.value;
                comma = ',';
            });
            result += ']';
            console.log(result);
            $('#@nameof(Model.RolesJson)').val(result);
        }
    </script>
}
